<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[心静茹水]]></title>
  <link href="http://proudxu.github.com/atom.xml" rel="self"/>
  <link href="http://proudxu.github.com/"/>
  <updated>2012-09-10T12:26:28+08:00</updated>
  <id>http://proudxu.github.com/</id>
  <author>
    <name><![CDATA[Zhao, Xuhai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[textarea的内容中含有html的情况]]></title>
    <link href="http://proudxu.github.com/blog/2012/09/10/string-html/"/>
    <updated>2012-09-10T11:22:00+08:00</updated>
    <id>http://proudxu.github.com/blog/2012/09/10/string-html</id>
    <content type="html"><![CDATA[<p>还有一周就可以回学校然后回家了，上周五很顺利的跟老板和经理请了两周假，所以这周得认真工作了。 <br/>
接着测试我写的插件，果然发现了问题。。。  <br/>
大概是这样的，这个插件是JIRA系统间传递issues，每个issue有很多的field，老板为了保证安全，要求在传输的时候检测每个域，看有没有指定的敏感关键字，如果有要求用户传输issue中进行修改，今天测试的时候，发现有个description域传输有问题，即如果description中含有关键字，要求用户在textarea中修改，程序再读取textarea中的内容重新存入issue中供传输。  <br/>
可是今天传输过程中，发现有个issue的description居然有很多html标签，显示到textarea中倒是没问题，可是读取的时候就郁闷了：  <br/>
本来应该是这样：</p>

<pre><code><textarea ...>string</textarea>
可是这个issue的description是这样的。。。
<textarea cols="60" rows=“2”> &lt;feature name= http://... required= true /&gt;...  </textarea>
</code></pre>


<p>  <br/>
这样的话用textarea的value属性读取的时候就会遇到问题，双引号，大于小于号都会对value产生影响，导致传过去的有错误。  <br/>
我记得好像有个类似的函数来用字符串传输html的，但函数名称想不起来了，只能用java的字符串替换函数将&#8221;替换为&#34;，将&lt;>分别替换为&lt; &gt;   <br/>
然后就传输正确了。好惊险啊，这要是突然出了什么大bug，我就走不了了。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Hack: 浏览器兼容性问题]]></title>
    <link href="http://proudxu.github.com/blog/2012/09/08/css-hack/"/>
    <updated>2012-09-08T11:14:00+08:00</updated>
    <id>http://proudxu.github.com/blog/2012/09/08/css-hack</id>
    <content type="html"><![CDATA[<p>直接看实例吧，下面的程序转载自: <a href="http://www.cnblogs.com/superc/archive/2012/03/11/2390652.html">Superc</a>和<a href="http://www.cnblogs.com/WuQiang/archive/2011/08/23/2150240.html">飘</a></p>

<pre><code>"\9"　例:"margin:0px auto\9;".这里的"\9"可以区别所有IE和FireFox.
"*"　IE6、IE7可以识别.IE8、FireFox不能.
"_"　IE6可以识别"_",IE7、IE8、FireFox不能.
如此,就可以完全区分开IE6、IE7、IE8、FireFox了.</code></pre>


<p></p>

<p>还是不知道怎么区分.好吧,来看个例子:</p>

<script src="https://gist.github.com/3672021.js?file=gistfile1.txt"></script>


<h2>    </h2>

<p>还有这个例子也不错：</p>

<script src="https://gist.github.com/3671558.js?file=gistfile1.html"></script>


<p>   <br/>
附上一张CSS Hack样式属性前缀表</p>

<center>
<img src="http://proudxu.github.com/images/css_hack.jpg">
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[向Octopress博客添加相册功能]]></title>
    <link href="http://proudxu.github.com/blog/2012/09/06/support-gallery/"/>
    <updated>2012-09-06T17:27:00+08:00</updated>
    <id>http://proudxu.github.com/blog/2012/09/06/support-gallery</id>
    <content type="html"><![CDATA[<p>唉，今天又没干别的，调试了一整天的Octopress，老板我对不起你。。。 <br/>
今天向我的博客添加了About Me页面和相册页面，这里主要说说相册功能是如何添加的。  <br/>
对于Octopress这种轻量级的静态博客，没有必要将相册功能做的很完善，神马添加相册，上传照片功能啥的都本地手动添加就行了，这里的相册主要就是展示一下照片，而且在简洁素雅的前提下最好有一些酷酷的效果，这就是我的追求。  <br/>
下午一直在找JS和Jquery的相册，试验了几个效果比较炫的，相册自带的css总是会和Octopress的css相冲突，导致切换到相册页面的时候整体排版就相当凌乱，在我很无助的时候，找到了这里：<a href="http://www.forceappx.com/blog/2011/12/28/getting-fancybox-to-play-nice-with-octopress/">appX</a>，这个文章主要讲的是如何将<a href="http://fancyapps.com/fancybox/#license">fancyBox</a>这个JQuery相册嵌入到Octopress日志中，给日志中的图片添加动态效果。在我试验他的方法之前，先试验了下fancyBox，效果出奇的让我满意，就是我要找的那种功能。  <br/>
fancyBox主要用于在网页中展示相册，单击相片墙中的一个相片的时候，能够有淡入淡出的效果，且能自如的通过鼠标滚轮或者相片两侧的向上向下按钮浏览整个相册的内容。从<a href="http://fancyapps.com/fancybox/#license">fancyBox</a>下载之后运行一下Demo会有更好的理解。</p>

<center>
<img src="http://proudxu.github.com/images/support_gallery.JPG">
</center>


<p>“安装过程”大概是这样的，首先得在博客中添加一个相册的导航按钮，方法是修改</p>

<pre><code>\source\_includes\custom\navigation.html    
</code></pre>

<p>仿造上面的添加一个相册页面的链接，比如这样：</p>

<pre><code>&lt;li&gt;&lt;a href="http://proudxu.github.com/blog/gallery/demo"&gt;Gallery&lt;/a&gt;&lt;/li&gt;    
</code></pre>

<p>我这里偷懒了，直接在他的demo上建立的我的相册功能，这样很方便，而且完全能满足我要的功能。  <br/>
添加了链接之后，将demo目录复制到<code>/source/blog/gallery/</code>目录下，当然，其他的目录比如<code>lib</code>、<code>source</code>目录也是必不可少的，这些里面包含了jquery和css等。别急，还得对<code>index.html</code>页面进行一下修改。如果不修改的话，这个相册就不能嵌入到网页当中，也就是说，单击相册链接之后，导航，边栏神马的就都不见了，所以得让Octopress将这个相册网页当成子页面，如下修改：将<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code>、<code>&lt;head&gt;</code>等等独立页面拥有的元素统统去掉，然后在页面最开始部位添加</p>

<pre><code>---
layout: page
title: Gallery
footer: false
---</code></pre>


<p>  <br/>
这样Octopress就会认为这个页面是子网页。然后选择demo中自己喜欢的样式，剩余的该删就删吧，不要舍不得。。。  <br/>
添加相片呢，就按照他的格式添加就好了，对了，每个相片还需一个缩略图。  <br/>
嗯，大致就是这样吧，然后生成博客，就能看到相册功能了。  <br/>
如果还有什么不明白的，可以在下面给我留言。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[指针数组与数组指针]]></title>
    <link href="http://proudxu.github.com/blog/2012/09/06/array-and-pointer/"/>
    <updated>2012-09-06T08:59:00+08:00</updated>
    <id>http://proudxu.github.com/blog/2012/09/06/array-and-pointer</id>
    <content type="html"><![CDATA[<p>昨天从面试宝典上看了道关于指针的面试题，发现这个上次绿盟科技笔试的时候考过，当时很凌乱，有几个记混了。</p>

<p>题目是这样的：</p>

<ul>
<li>定义一个整形数</li>
<li>定义一个指向整形数的指针</li>
<li>定义一个指向指针的指针，它指向的指针，是一个指向整形数的指针</li>
<li>定义一个具有10个整形数的数组</li>
<li>定义一个具有10个指针的数组，这些指针都是指向整形数的</li>
<li>定义一个指向有10个整形数 数组的指针</li>
<li>定义一个指向函数的指针，该函数有一个整形参数 并返回一个整形数据</li>
<li>定义一个有10个指针的数组，每个指针指向一个函数，该函数有一个整形参数，返回一个整形数</li>
</ul>


<pre><code>a) int a; // An integer 
b) int *a; // A pointer to an integer 
c) int **a; // A pointer to a pointer to an integer 
d) int a[10]; // An array of 10 integers 
e) int *a[10]; // An array of 10 pointers to integers 
f) int (*a)[10]; // A pointer to an array of 10 integers 
g) int (*a)(int); // A pointer to a function a that takes an integer argument and returns an integer 
h) int (*a[10])(int); // An array of 10 pointers to functions that take an integer argument and return an integer </code></pre>


<p><span style="color:red; font-weight:bold">诀窍：弄清楚* [] ()的优先级</span>   <br/>
详细解答参考这里：<a href="http://blog.csdn.net/lyl494223339/article/details/7854396">解答</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加tag cloud且支持中文]]></title>
    <link href="http://proudxu.github.com/blog/2012/09/05/add-tag-cloud-and-support-chinese/"/>
    <updated>2012-09-05T19:06:00+08:00</updated>
    <id>http://proudxu.github.com/blog/2012/09/05/add-tag-cloud-and-support-chinese</id>
    <content type="html"><![CDATA[<p>今天上班又不务正业了，主要是昨天晚上就完成了老板最近布置的修改JIRA插件，添加敏感关键字检测及提供修改功能的任务，上午给老板演示了一下，在他提出的各种极端情况下插件都能很好的工作，老板让我今天在界面上加些交互信息，使交互更加友好。 <br/>
整个白天都在折腾我的Octopress博客，这个果然很需要耐心，还好我最近已经被java的各种bug折磨的宠辱不惊了。今天主要添加了tag功能。正如<a href="http://log4d.com/2012/05/tag-cloud/">Log4D</a>所说的那样，一篇文章只能输入一个category，但可以有多个tag，我很同意这个观点。我这里也是用了他所用的两个插件<a href="https://github.com/robbyedwards/octopress-tag-pages">robbyedwards/octopress-tag-pages</a>和<a href="https://github.com/robbyedwards/octopress-tag-cloud">robbyedwards/octopress-tag-cloud</a>,不过跟他不同的是，我只用了官方网站上提供的两个插件，因为我觉得category还是排列整齐点的好，毕竟一个博客的category不会很多，没有必要弄成tag那种有大有小的样式，所以category我还沿用了Octopress官方的样式。这两个插件安装起来不太难，不过有些细节需要注意的。  <br/>
第一个插件的功能是使文章支持<code>tag</code>，第二个是集中显示<code>tag cloud</code>。</p>

<p><strong>关于第一个插件的安装</strong>，我是把官网上提供的文件都复制到了相应的目录，这样在Archives中就能看到tag的信息，<a href="https://github.com/robbyedwards/octopress-tag-pages">robbyedwards/octopress-tag-pages</a>中提到的<code>Usage</code>,上面的我没有用到，只是往<code>config.yml</code>中添加了</p>

<pre><code>tag_dir: tags    
</code></pre>

<p>第二个配置信息添加的时候总是出错，不过不添加也没关系。可以在下属文件中进行修改。</p>

<pre><code>\source\includes\post\tags.html    
</code></pre>

<p>只需在<code>span</code>标签中添加Tags:即可。
添加之后就可以使用tag功能了，具体是在新post出的日志中添加,语法是</p>

<pre><code>tags: [tag1, tag2, ...]
</code></pre>

<p>为了使每次新post出的日志都能自动附带tags: 标签，可以修改<code>config.rb</code>文件，在110行左右添加<code>post.puts "tags: "</code>。  <br/>
<strong>第二个插件的安装</strong>，复制相应文件到对应的目录，然后到<code>source\_includes\custom\navigation.html</code>中添加一个tag cloud页面的链接，指向刚刚添加的tags.html文件。对了，还得修改下样式，到<code>sass/custom/_styles.scss</code>中添加如下css样式：</p>

<pre><code>#content article .cloud li{
  display: inline;
  list-style: none outside none;
  padding: 0 4px;
}</code></pre>


<p>  <br/>
之后把tags.html中的样式换成cloud即可。  <br/>
<strong>关于使category，和tag支持中文</strong>，由于我没有用Log4D修改之后的插件，所以出现了category和tag不支持中文的情况，这个的修改参考了<a href="http://pfmiles.github.com/blog/liquid-error-about-regexp-match-when-using-octopress-tagcloud/">pf_miles</a>的日志，说的挺好的，不过对于像我这样两个tag插件都用官方原版的来说，就不能直接复制里面的代码了，否则会出现tag和category相混淆的情况。但他的思想还是可以学的嘛，提炼出来，就是把<code>plugins</code>目录下的<code>tag_cloud.rb</code>、<code>tag_generator.rb</code>、<code>catetory_generator.rb</code>这几个文件的#正则表达式#部分都加上\u，就可以了。  <br/>
思路可能有点乱，这是我凭借记忆写出来的，有可能有些出入，如果有什么不明白的，可以评论，我会及时回复的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给octopress添加Disqus评论功能]]></title>
    <link href="http://proudxu.github.com/blog/2012/09/03/config-comment-on-octopress/"/>
    <updated>2012-09-03T19:16:00+08:00</updated>
    <id>http://proudxu.github.com/blog/2012/09/03/config-comment-on-octopress</id>
    <content type="html"><![CDATA[<p>经过了几天的折腾，昨天终于把octopress博客建立好了。更新起来很方便，只需要编写类似Latex语言的markdown文件，然后<code>rake generate</code>, <code>rake deploy</code>就可以啦。</p>

<p>今天加入了评论功能，这里主要记录下添加评论的过程。Octopress中其实已经集成了Disqus评论插件，只需要简单设置一下就可以。</p>

<ul>
<li><p><strong>登录<a href="http://disqus.com">Disqus网站</a></strong>, 然后注册用户名密码，邮箱验证。</p></li>
<li><p>单击<em>Get this on your site</em>按钮</p></li>
</ul>


<center>
<img src="http://proudxu.github.com/images/add_comment1.PNG" >
</center>


<ul>
<li><strong>填写网站的信息</strong></li>
</ul>


<center>
<img src="http://proudxu.github.com/images/add_comment2.PNG">
</center>


<ul>
<li>修改_config.yml文件:</li>
</ul>


<pre><code>#Disqus Comments
disqus_short_name: Site Shortname
disqus_show_comment_count: true</code></pre>


<p>之后就可以通过<code>rake new_post['title']</code>创建日志，日志中设定：</p>

<pre><code>comment: true
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging Like a Hacker]]></title>
    <link href="http://proudxu.github.com/blog/2012/09/03/blogging-like-a-hacker/"/>
    <updated>2012-09-03T12:42:00+08:00</updated>
    <id>http://proudxu.github.com/blog/2012/09/03/blogging-like-a-hacker</id>
    <content type="html"><![CDATA[<p><strong>转载自<a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">Blogging like a hacker</a></strong></p>

<p>h1. Blogging Like a Hacker</p>

<p>p(meta). 17 Nov 2008 - San Francisco</p>

<p>Back in 2000, when I thought I was going to be a professional writer, I spent hours a day on LiveJournal doing writing practice with other aspiring poets and authors. Since then I&#8217;ve blogged at three different domains about web standards, print design, photography, Flash, illustration, information architecture, ColdFusion, package management, PHP, CSS, advertising, Ruby, Rails, and Erlang.</p>

<p>I love writing. I get a kick out of sharing my thoughts with others. The act of transforming ideas into words is an amazingly efficient way to solidify and refine your thoughts about a given topic. But as much as I enjoy blogging, I seem to be stuck in a cycle of quitting and starting over. Before starting the current iteration, I resolved to do some introspection to determine the factors that were leading to this destructive pattern.</p>

<p>I already knew a lot about what I <em>didn&#8217;t</em> want. I was tired of complicated blogging engines like WordPress and Mephisto. I wanted to write great posts, not style a zillion template pages, moderate comments all day long, and constantly lag behind the latest software release. Something like Posterous looked attractive, but I wanted to style my blog, and it needed to be hosted at the domain of my choosing. For the same reason, other hosted sites (wordpress.com, blogger.com) were disqualified. There are a few people directly using GitHub as a blog (which is very cool), but that&#8217;s a bit too much of an impedance mismatch for my tastes.</p>

<p>On Sunday, October 19th, I sat down in my San Francisco apartment with a glass of apple cider and a clear mind. After a period of reflection, I had an idea. While I&#8217;m not specifically trained as an author of prose, I <em>am</em> trained as an author of code. What would happen if I approached blogging from a software development perspective? What would that look like?</p>

<p>First, all my writing would be stored in a Git repository. This would ensure that I could try out different ideas and explore a variety of posts all from the comfort of my preferred editor and the command line. I&#8217;d be able to publish a post via a simple deploy script or post-commit hook. Complexity would be kept to an absolute minimum, so a static site would be preferable to a dynamic site that required ongoing maintenance. My blog would need to be easily customizable; coming from a graphic design background means I&#8217;ll always be tweaking the site&#8217;s appearance and layout.</p>

<p>Over the last month I&#8217;ve brought these concepts to fruition and I&#8217;m pleased to announce &#8220;Jekyll&#8221;:http://github.com/mojombo/jekyll. Jekyll is a simple, blog aware, static site generator. It takes a template directory (representing the raw form of a website), runs it through Textile and Liquid converters, and spits out a complete, static website suitable for serving with Apache or your favorite web server. If you&#8217;re reading this on the website (http://tom.preston-werner.com), you&#8217;re seeing a Jekyll generated blog!</p>

<p>To understand how this all works, open up my &#8220;TPW&#8221;:http://github.com/mojombo/tpw repo in a new browser window. I&#8217;ll be referencing the code there.</p>

<p>Take a look at &#8220;index.html&#8221;:http://github.com/mojombo/tpw/tree/master/index.html. This file represents the homepage of the site. At the top of the file is a chunk of YAML that contains metadata about the file. This data tells Jekyll what layout to give the file, what the page&#8217;s title should be, etc. In this case, I specify that the &#8220;default&#8221; template should be used. You can find the layout files in the &#8221;<em>layouts&#8221;:http://github.com/mojombo/tpw/tree/master/</em>layouts directory. If you open &#8220;default.html&#8221;:http://github.com/mojombo/tpw/tree/master/_layouts/default.html you can see that the homepage is constructed by wrapping index.html with this layout.</p>

<p>You&#8217;ll also notice Liquid templating code in these files. &#8220;Liquid&#8221;:http://www.liquidmarkup.org/ is a simple, extensible templating language that makes it easy to embed data in your templates. For my homepage I wanted to have a list of all my blog posts. Jekyll hands me a Hash containing various data about my site. A reverse chronological list of all my blog posts can be found in <code>site.posts</code>. Each post, in turn, contains various fields such as <code>title</code> and <code>date</code>.</p>

<p>Jekyll gets the list of blog posts by parsing the files in the &#8221;<em>posts&#8221;:http://github.com/mojombo/tpw/tree/master/</em>posts directory. Each post&#8217;s filename contains the publishing date and slug (what shows up in the URL) that the final HTML file should have. Open up the file corresponding to this blog post: &#8220;2008-11-17-blogging-like-a-hacker.textile&#8221;:http://github.com/mojombo/tpw/tree/master/<em>posts/2008-11-17-blogging-like-a-hacker.textile. GitHub renders textile files by default, so to better understand the file, click on the &#8220;raw&#8221;:http://github.com/mojombo/tpw/tree/master/</em>posts/2008-11-17-blogging-like-a-hacker.textile?raw=true view to see the original file. Here I&#8217;ve specified the <code>post</code> layout. If you look at that file you&#8217;ll see an example of a nested layout. Layouts can contain other layouts allowing you a great deal of flexibility in how pages are assembled. In my case I use a nested layout in order to show related posts for each blog entry. The YAML also specifies the post&#8217;s title which is then embedded in the post&#8217;s body via Liquid.</p>

<p>Posts are handled in a special way by Jekyll. The date you specify in the filename is used to construct the URL in the generated site. This post, for instance, ends up at <code>http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html</code>.</p>

<p>Files that do not reside in directories prefixed with an underscore are mirrored into a corresponding directory structure in the generated site. If a file does not have a YAML preface, it is not run through the Liquid interpreter. Binary files are copied over unmodified.</p>

<p>In order to convert your raw site into the finished version, you simply run:</p>

<pre class="terminal"><code>$ jekyll /path/to/raw/site /path/to/place/generated/site</code></pre>


<p>Jekyll is still a very young project. I&#8217;ve only developed the exact functionality that I&#8217;ve needed. As time goes on I&#8217;d like to see the project mature and support additional features. If you end up using Jekyll for your own blog, drop me a line and let me know what you&#8217;d like to see in future versions. Better yet, fork the project over at GitHub and hack in the features yourself!</p>

<p>I&#8217;ve been living with Jekyll for just over a month now. I love it. Driving the development of Jekyll based on the needs of my blog has been very rewarding. I can edit my posts in TextMate, giving me automatic and competent spell checking. I have immediate and first class access to the CSS and page templates. Everything is backed up on GitHub. I feel a lightness now when I&#8217;m writing a post. The system is simple enough that I can keep the entire conversion process in my head. The distance from my brain to my blog has shrunk, and, in the end, I think that will make me a better author.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[work in intel]]></title>
    <link href="http://proudxu.github.com/blog/2012/09/03/work-in-intel/"/>
    <updated>2012-09-03T09:50:00+08:00</updated>
    <id>http://proudxu.github.com/blog/2012/09/03/work-in-intel</id>
    <content type="html"><![CDATA[<p>好费劲啊，octopress博客终于整好了。<br></p>

<h2>我会慢慢的从网易博客<em><a href="http://blog.163.com/lovejingru@yeah/">永远的海哥</a></em>迁移到这里。</h2>

<p>问题总结如下：</p>

<pre><code>ssh的时候提示22 **bad file number**   
主要原因是公司的网络问题，可能因为代理或者设置了防火墙的原因，换成外网就没问题了；   
public key问题： 按照github-&gt;admin-&gt;ssh key中的说明就可以了；   
中文编码问题：将post出的日志编码转换为utf-8 without BOM格式，再保存；   
</code></pre>

<p><strong>下一步研究下代码插入，高亮和comment问题。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello]]></title>
    <link href="http://proudxu.github.com/blog/2012/09/02/hello/"/>
    <updated>2012-09-02T23:10:00+08:00</updated>
    <id>http://proudxu.github.com/blog/2012/09/02/hello</id>
    <content type="html"><![CDATA[<p>冒泡排序</p>

<script src="https://gist.github.com/3600541.js?file=gistfile1.cpp"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[first note]]></title>
    <link href="http://proudxu.github.com/blog/2012/09/02/first-note/"/>
    <updated>2012-09-02T22:08:00+08:00</updated>
    <id>http://proudxu.github.com/blog/2012/09/02/first-note</id>
    <content type="html"><![CDATA[<p>实习三周了，感觉还不错，从之前的不能想象我居然开始在公司里上班，到现在慢慢接受且熟悉了现在的生活。第一天到公司的时候，感觉什么都这么新鲜，刷卡进楼，再刷卡进办公区，看到很多忙碌的人，说着各种术语，还夹杂着英文单词，烧个image、这个得work on一下、更新下wiki，什么都这么陌生，我的电脑没配下来之前一直用一个台式电脑，装的居然还是OpenSUSE系统，好恨之前没把linux用熟，而且公司的网络还特别奇怪，得设置代理，设置完了吧用Firefox可以上去网，命令行里可以ping到网站，但一用命令下载什么软件包却始终连不上，到现在也没太整明白，只知道用IE可以上去公司的内网，火狐却不行，上公司的邮箱和lync需要一个无线网络连接，下软件包却需要换另一个网络连接，总之很麻烦。
公司里到处可以见到讨论技术的人，楼梯口的沙发，电梯里，等待打饭的人，甚至是卫生间里。卫生间里有个大叔专门负责清洁，把那擦的一尘不染，而且总是笑眯眯的，遇到人讨论架构啊系统啊什么的，感觉他跟我一样好奇，听着他们的对话，总有种错觉，那个大叔是intel的专家，掌握着鬼魅般的技术，笑看一切，好吧，我承认是黑客小说看多了。公司的食堂还不错，很便宜，而且第一顿饭的印象很好，记得打了份鸡腿，一份白菜豆腐，一碗米饭，一碗红豆粥，才8块几，据说这个食堂是有intel补贴的，怪不得呢，可惜就是不提供晚饭，谁让这边从不加班呢。每次到中午11：30去吃饭的人都很多，排好几个很长的队伍，然后取盘子，然后去窗口自己选一份份摆好的菜，然后是米饭和粥，再到出口那块刷饭卡，有两个漂亮的工作人员刷卡然后发一张餐巾纸，这两个人特别厉害，我观察过很多回了，那么多种类的菜，不同的价格，而且盘里两到三个菜加上饭和粥或汤，她们却能看一眼就算出来多少钱然后刷卡，不需要停顿，很强的，intel里到处都是神人啊！
老板人很好，电话面试我的人就是他，记得当时问了很多c语言的东西，比如指针和数组的区别，复制构造函数怎么写等，到这边之后发现暂时还没用到c和c++，第一天刚来就带我一起去了一个会议室，跟我讲要做JIRA插件开发，同时接手一个要离职的同事的工作，老板讲话很和蔼，也很有条理，会时不时的看着你的眼睛，期待你的反馈，让我感动的是他居然亲自到我电脑这告诉我怎么申请出入办公区的卡，需要什么在线培训等，第一周基本是让我熟悉JIRA使用，每天都会来问问进展，有什么问题，第二周开始让我写daily report，包括昨天干了什么，今天打算干什么，遇到什么问题等，记得第一天写了之后没一会，他就过来给我讲我report里写的遇到的问题，很好的老板，口头语是没错，太对了，而且很喜欢笑，是个快乐的IT男。第二周开始与那个要离职的人交接，把他做过的、维护过的一些程序给我看，有将尽十个plugin和gadget，我差不多每天看一个，先熟悉功能，然后看看代码，不懂的的地方他就给我讲讲，可惜我的JAVA和js不是特别熟悉，而且JIRA有很多自己的API，还有SOAP和REST协议神马的，要一天之内理解他一两个月写出的程序，很有困难，所以也只能了解个大概，知道原理，具体的以后再深入研究吧。这周三开始有任务了，老板第一天就跟我说过，让我修改一个第三方插件，我一看，数了数，有90个类。。。 结构很复杂的样子，让我修改其中的bug，然后扩充一项功能，昨天看了一下午，晚上回来头昏昏沉沉的，但还得继续学java，其实虽说是插件，但每个插件基本都是一个网站，而且还是有前端，有后台action处理的，类似jsp和servlet组成的网站，但还有所不同，要用到jira的api，还有jira奇怪的前后台通信方式和它奇怪的数据库，唉，老板居然给我这个新手这么大的任务，崩溃了，看来明天还得去公司呆着去。
公司的环境挺好的，饼干饮料咖啡奶茶啥的，随便享用，我最喜欢喝那的拿铁咖啡和泡沫奶茶，记得昨天去喝奶茶，按了按钮，居然出来的只是牛奶，看来暂时没有茶的原料了。公司挺人性化的，边上还放了杯子，我原来一直用那的杯子，用完之后冲一下，后来一个屋的同事告诉我那个是供外来人员用的，得自己带杯子过来。。。 我瞬间感觉我又out了，从那之后我就不好意思用那的杯子了，不过我的水杯比较能装，有时候去那就打两份咖啡，哈哈。这有一点特别好，就是从来不加班，大部分人都是5点左右就走了，不走的六点之前基本也都走了，我是在哪都是呆着，况且还有免费空调，就每天多呆会。
加油，认真实习，好公司好环境只是暂时的，要想变成永恒，还得靠自己的努力。</p>
]]></content>
  </entry>
  
</feed>
